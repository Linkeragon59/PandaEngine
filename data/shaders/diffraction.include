vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float sinc(float x)
{
	return sin(x) / x;
}

float diffraction(float x, float width, float waveLength, float screenDistance)
{
	float C = 3.1416 * width * 10.0 / (waveLength * screenDistance);
    return pow(sinc(C * x), 2.0);
}

vec4 adaptLuminosity(vec4 lightColorRGB, float luminosity)
{
    vec3 lighColortHSV = rgb2hsv(lightColorRGB.rgb);

	float saturation = 1.0;
	float value = 1.0;
	if (luminosity <= 1.0)
		value = luminosity;
	else
		saturation = 1.0 / pow(luminosity, 0.1);

	vec3 finalLightColorRGB = hsv2rgb(vec3(lighColortHSV.x, saturation, value));
    return vec4(finalLightColorRGB.r, finalLightColorRGB.g, finalLightColorRGB.b, lightColorRGB.a);
}

layout (location = 0) in vec2 inUV;

layout (location = 0) out vec4 outColor;

layout (binding = 0) uniform BaseUBO
{
	float xrange;
	float yrange;
	float screenDistance;

	float luminosity;
	float waveLength;
	float minVisibleWaveLength;
	float maxVisibleWaveLength;
} baseUBO;

layout (binding = 1) uniform sampler2D samplerTexture;